{"version":3,"sources":["components/GameObject.ts","components/SpaceShip.ts","components/Stage.ts","index.ts"],"names":[],"mappings":";;;;AAEA,IAAA,aAAA,aAAA,YAAA;AAIE,aAAA,UAAA,CACS,MADT,EAES,QAFT,EAEuC;AAD9B,aAAA,MAAA,GAAA,MAAA;AACA,aAAA,QAAA,GAAA,QAAA;AAEP,aAAK,GAAL,GAAW,OAAO,UAAP,CAAkB,IAAlB,CAAX;AACD;AAED,eAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAa,IAAb,EAAiB;AACT,AEdV,IAAA,QFcU,KAAA,CEdV,IFcU,QAAA,IEdV,QAAA,aAAA,CAAA,CAAA;AFcU,AEZV,IAAA,QFYY,AEZZ,IFYY,GAAA,CAAF,KEZV,YAAA;AFYU,AEPR,ACPF,IAAA,QHce,CEPb,CCPF,EHce,EEPb,CFOa,AEPM,CFOX,KEPR,EAA4C,GCP9C,QAAA,oBAAA,CAAA,CAAA;AHgBI,AETiB,ACLrB,OAAO,MHcE,AETY,ACLrB,GAAgB,GDKK,EFSjB,CAAc,AETG,MAAA,ACLL,EHcZ,GAAyB,CAAE,KAAK,KAAL,CAAW,OAAO,CAAlB,EAAqB,OAAO,CAA5B,CAAF,IAAoC,MAAM,KAAK,EAA/C,IAAqD,GAA9E;AAEA,AEVA,ACLF,QAAM,IHeE,CEVD,GAAL,CCLqD,EDK1C,EFUI,KAAK,AEVF,ACL4C,QHe/C,CAAc,CEVlB,CAAkB,GCLwB,CDK1C,ACLkE,CDK7E,CFUe,GAAyB,GGfa,CAAvD,CHe+C,EAA9B,GAAiC,GAAhD;AAEA,AEXA,ACLF,QAAM,KHgBC,AEXA,GCLe,IDKpB,ACLwB,CHgBxB,CAAc,CAAd,GAAkB,EGhBM,GHgBD,MGhBC,CAAJ,CHgBF,AGhBY,CHgBE,CAAd,GAAkB,CGhBhB,CAAtB,GHgB2C,GAAL,CAAS,MAAT,IAAmB,CAAvD;AACA,AEXD,ACJD,UAAM,GHeC,GGfP,KHeE,CAAc,CAAd,GAAkB,KAAK,QAAL,CAAc,CAAd,GAAkB,KAAK,GAAL,CAAS,MAAT,IAAmB,CAAvD;AACD,AEVD,ACLA,KHMA,KEDA,ECLQ,GAAR,CAAY,GDKZ,CAAA,OAAA,ECLA,CDKA,YAAA;AFYA,AEXE,ACLH,CAND,cHsBE,AEXS,SFWT,CAAA,MEXE,CAAwB,EFW1B,GAAA,GEXE,EAAkC,KFW1B,AEX+B,GFWzC,EAAqB,QEXnB;AFYA,AEXA,YFWM,CEXD,KFWO,IAAI,IEXhB,CFWY,EAAZ;AACA,AEXA,YFWI,CEXC,EFWL,GAAU,CEXV,CAAY,CFWZ,IEXA,CAAkB,UAAlB,GAA+B,OAA/B;AFaA,AEXA,aFWK,AEXA,MFWL,AEXA,GFWc,AEXA,GFWd,CEXkB,YAAA,SAAA,CAAJ,CAAc,KAAK,MAAnB,EAA2B;AFY1C,AEXG,KFMJ,UENO,GADoC;AFc3C,AEZI,eFYJ,AEZO,GAFoC,MFc3C,CAAA,MAAA,GAAA,YAAA;AACQ,AEZJ,YFYI,KAAA,KAAA,AEZM,IAH6B,IFenC;AAAA,AEXJ,YFYA,IAAA,GAAA,CADI,EEXM,CAJ6B;AFenC,AEVJ,YFYA,IAAA,GAAA,CAFI,AEVI,EAL+B;AFenC,AC/BV,ACsBM,IDtBN,QDkCM,OClCN,ACsBa,CFYP,GAAA,KAHI,OC/BV,QAAA,cAAA,CAAA,CAAA;AD+BU,AC7BV,ACc6C,IDdzC,KCcc,CAAd,EFmBE,CCjCO,QDiCP,GAAA,MAJI;AAAA,AC5BR,ACsBE,YFWE,CCjCK,ACsBF,CDvBI,ICuBT,GAAa,EFWX,EEXe,CFWf,QALI,GENW,SAAA,CAAJ,CAAc,KAAK,MAAnB,EAA2B;AFcxC,ACnCF,ACsBI,aFaG,ACnCE,ECsBF,CFaL,CAAS,CEd+B,GFcxC;AAEA,ACvCS,ACyBP,CDzBN,WDuCU,GEdD,GAFmC,GFgBzB,WAAW,KAAK,EAAhB,GAAmB,GAAlC;AAEA,ACpCJ,ACqBM,IDrBF,SDoCK,GAAL,CAAS,ECpCM,CAAnB,ECqBgB,IFeZ,CAAmB,AElBqB,IFkBjB,QAAQ,CAA/B,EAAkC,IAAI,SAAS,CAA/C;AACA,ACnCJ,ACoBM,ODpBC,MDmCE,GAAL,CAAS,KEfG,CFeZ,ACnCJ,CDmCoB,ACnCI,ACgBoB,MFmBxC,KCnCJ,EAAqC,UAAA,CAAA,EAAC;ADoClC,ACnCF,ACoBI,aFeG,ACnCE,CAAT,EDmCE,CAAS,GEfC,EAL8B,IFoBxC,CAAmB,CAAC,CAAD,GAAK,QAAQ,CAAhC,EAAmC,CAAC,CAAD,GAAK,SAAS,CAAjD;AACA,ACnCH,ACoBK,CD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","file":"src.334f5f2c.map","sourceRoot":"../src","sourcesContent":["import { IfcSpaceShipSettings } from './interfaces';\n\nexport default class GameObject {\n  ctx : CanvasRenderingContext2D;\n  sprite: HTMLImageElement;\n\n  constructor(\n    public canvas: HTMLCanvasElement,\n    public settings: IfcSpaceShipSettings\n  ) {\n    this.ctx = canvas.getContext('2d');\n  }\n\n  moveTo(newX, newY) {\n    const { x, y } = this.settings;\n\n    this.settings.rotation = - Math.atan2(newX - x, newY - y) * (180 / Math.PI) - 180;\n\n    const radian = this.settings.rotation * Math.PI/180;\n\n    this.settings.x = this.settings.x + Math.sin(radian) * 2;\n    this.settings.y = this.settings.y - Math.cos(radian) * 2;\n  }\n\n  setSprite(src: string) {\n    const img = new Image();\n    img.src = src;\n\n    this.sprite = img;\n  }\n\n  render() {\n    const {\n      x,\n      y,\n      width,\n      height,\n      rotation\n    } = this.settings;\n\n    this.ctx.save();\n\n    const radian = rotation * Math.PI/180;\n\n    this.ctx.translate(x + width / 2, y + height / 2);\n    this.ctx.rotate(radian);\n    this.ctx.translate(-x - width / 2, -y - height / 2);\n    this.ctx.drawImage(this.sprite, x, y, width, height);\n\n    this.ctx.restore();\n  }\n\n  checkColision(gameObject: GameObject) {\n    const selfBounding = this.getBoundingRect(this.settings);\n    const otherBounding = this.getBoundingRect(gameObject.settings);\n\n    this.showBoundaries(this);\n    this.showBoundaries(gameObject);\n\n    if(\n      ((selfBounding.top >= otherBounding.top && selfBounding.top <= otherBounding.bottom) &&\n      (selfBounding.right <= otherBounding.right && selfBounding.right >= otherBounding.left)) ||\n      ((selfBounding.left >= otherBounding.left && selfBounding.left <= otherBounding.right) &&\n      (selfBounding.bottom <= otherBounding.bottom && selfBounding.bottom >= otherBounding.top))\n    ) {\n\n      console.log('colidiu')\n    }\n  }\n\n  /**\n   * Debug only\n   */\n  showBoundaries(gameObject: GameObject) {\n    const target = gameObject || this;\n\n    this.ctx.save();\n    this.ctx.strokeStyle  = 'red';\n    this.ctx.strokeRect(target.settings.x, target.settings.y, target.settings.width, target.settings.height);\n    this.ctx.restore();\n  }\n\n  getBoundingRect({x, y, width, height}) {\n    return {\n      top: y,\n      right: x + width,\n      bottom: y + height,\n      left: x\n    }\n  }\n}\n","import { IfcSpaceShipSettings } from './interfaces';\nimport GameObject from './GameObject';\n\nlet cursor = {\n  clientX: 0,\n  clientY: 0,\n};\n\nlet patrolFactor = 1;\n\nwindow.addEventListener('mousemove', e => {\n  cursor = e;\n});\n\nexport default class SpaceShip extends GameObject {\n  constructor(\n    public canvas: HTMLCanvasElement,\n    public settings: IfcSpaceShipSettings\n  ) {\n    super(canvas, settings);\n    this.setSprite('http://chittagongit.com//images/spaceship-icon-png/spaceship-icon-png-6.jpg');\n  }\n\n  playerMovements() {\n    const { x, y, isPlayer } = this.settings;\n\n    const threshold = 10;\n\n    if(\n      isPlayer &&\n      (Math.abs(x - cursor.clientX) > threshold || Math.abs(y - cursor.clientY) > threshold)\n    ) {\n      this.moveTo(cursor.clientX, cursor.clientY);\n    }\n\n    if(!isPlayer) {\n      this.patrol();\n    }\n  }\n\n  patrol() {\n    const { x, y } = this.settings;\n\n    if(x > window.innerWidth) {\n      patrolFactor = 1;\n    } else if(x < 0) {\n      patrolFactor = -1;\n    }\n\n    this.moveTo(x - 1 * patrolFactor, y);\n  }\n\n  render() {\n    this.playerMovements();\n    super.render();\n  }\n}\n","import SpaceShip from './SpaceShip';\n\nexport default class Stage {\n  player: SpaceShip;\n  enemy: SpaceShip;\n  ctx : CanvasRenderingContext2D;\n\n  constructor(public canvas: HTMLCanvasElement) {\n    this.ctx = canvas.getContext('2d');\n    this.onMount();\n  }\n\n  onMount() {\n    window.addEventListener('resize', this.setFullScreen);\n    this.setFullScreen();\n    this.canvas.style.background = 'black';\n\n    this.player = new SpaceShip(this.canvas, {\n      x: 100,\n      y: 100,\n      isPlayer: true,\n      rotation: 1,\n      height: 30,\n      width: 30\n    });\n\n    this.enemy = new SpaceShip(this.canvas, {\n      x: 200,\n      y: 200,\n      isPlayer: false,\n      rotation: 60,\n      height: 60,\n      width: 60\n    });\n  }\n\n  setFullScreen() {\n    this.canvas.width = window.innerWidth;\n    this.canvas.height = window.innerHeight;\n  }\n\n  render() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    this.player.render();\n    this.enemy.render();\n    this.player.checkColision(this.enemy);\n\n    window.requestAnimationFrame(() => this.render());\n  }\n}\n","import Stage from './components/Stage';\n\nwindow.onload = () => {\n  const canvas : HTMLCanvasElement = <HTMLCanvasElement> document.getElementById('canvas');\n  const stage : Stage = new Stage(canvas);\n\n  stage.render();\n  console.log('dwwcscssass')\n};\n"]}